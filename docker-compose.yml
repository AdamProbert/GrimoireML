version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: grimoire
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.12-slim
    image: grimoire-backend:latest
    ports:
      - "8000:8000"
    environment:
      APP_ENV: development
      PYTHONUNBUFFERED: "1"
      REDIS_URL: redis://redis:6379/0
      IMAGE_CACHE_TTL: 86400
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/grimoire
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 5
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./webapp
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 20-alpine
    image: grimoire-frontend:latest
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000:3000"
    # Hot reload development setup: bind mount source; keep node_modules inside container layer
    volumes:
      - ./webapp:/app
      - /app/node_modules
    environment:
      NEXT_PUBLIC_API_BASE: http://backend:8000
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: grimoireml-prometheus
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      [
        "--config.file=/etc/prometheus/prometheus.yml",
        "--storage.tsdb.retention.time=15d",
        "--web.enable-lifecycle",
      ]

  grafana:
    image: grafana/grafana:11.1.0
    container_name: grimoireml-grafana
    depends_on:
      prometheus:
        condition: service_started
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_DEFAULT_THEME: light
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro

  redis:
    image: redis:7-alpine
    command:
      [
        "redis-server",
        "--save",
        "900",
        "1",
        "--maxmemory",
        "512mb",
        "--maxmemory-policy",
        "allkeys-lru",
      ]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  redis-data:
  pgdata:
